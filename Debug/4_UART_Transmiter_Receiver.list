
4_UART_Transmiter_Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000218  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003ac  080003b4  000013b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003ac  080003ac  000013b4  2**0
                  CONTENTS
  4 .ARM          00000000  080003ac  080003ac  000013b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003ac  080003b4  000013b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003ac  080003ac  000013ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003b0  080003b0  000013b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003b4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003b4  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000044b  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000016b  00000000  00000000  0000182f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  000019a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000045  00000000  00000000  00001a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000cd6f  00000000  00000000  00001a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000685  00000000  00000000  0000e7bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004f873  00000000  00000000  0000ee41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0005e6b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000e8  00000000  00000000  0005e6f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0005e7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000394 	.word	0x08000394

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000394 	.word	0x08000394

080001d4 <compute_divisor>:
#define APB1_CLK			SYS_FREQ //Verify and change code
#define BAUD_RATE			115200

#define TX_EMPTY			(1U<<7)

static uint16_t compute_divisor(uint32_t PeriphClk, uint32_t BaudRate){
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	6039      	str	r1, [r7, #0]

	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80001de:	683b      	ldr	r3, [r7, #0]
 80001e0:	085a      	lsrs	r2, r3, #1
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	441a      	add	r2, r3
 80001e6:	683b      	ldr	r3, [r7, #0]
 80001e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80001ec:	b29b      	uxth	r3, r3
}
 80001ee:	4618      	mov	r0, r3
 80001f0:	370c      	adds	r7, #12
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr

080001fa <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate){
 80001fa:	b580      	push	{r7, lr}
 80001fc:	b084      	sub	sp, #16
 80001fe:	af00      	add	r7, sp, #0
 8000200:	60f8      	str	r0, [r7, #12]
 8000202:	60b9      	str	r1, [r7, #8]
 8000204:	607a      	str	r2, [r7, #4]

	USARTx->BRR = compute_divisor(PeriphClk,BaudRate);
 8000206:	6879      	ldr	r1, [r7, #4]
 8000208:	68b8      	ldr	r0, [r7, #8]
 800020a:	f7ff ffe3 	bl	80001d4 <compute_divisor>
 800020e:	4603      	mov	r3, r0
 8000210:	461a      	mov	r2, r3
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	609a      	str	r2, [r3, #8]
}
 8000216:	bf00      	nop
 8000218:	3710      	adds	r7, #16
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
	...

08000220 <uart_transmit>:

void uart_transmit(int ch){
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]

	//Ensure transmit data register is empty
	while(!(USART2->SR & TX_EMPTY)){}
 8000228:	bf00      	nop
 800022a:	4b08      	ldr	r3, [pc, #32]	@ (800024c <uart_transmit+0x2c>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000232:	2b00      	cmp	r3, #0
 8000234:	d0f9      	beq.n	800022a <uart_transmit+0xa>

	//Write to transmit data register
	USART2->DR = (ch & 0xFF);	//Bitwise and to ensure that only 8 bits are transmitted
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	4a04      	ldr	r2, [pc, #16]	@ (800024c <uart_transmit+0x2c>)
 800023a:	b2db      	uxtb	r3, r3
 800023c:	6053      	str	r3, [r2, #4]
}
 800023e:	bf00      	nop
 8000240:	370c      	adds	r7, #12
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	40004400 	.word	0x40004400

08000250 <uart2_tx_init>:

void uart2_tx_init(){
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0

	/****Configure UART GPIO pin ****/

	//Enable clock access
	RCC->AHB1ENR |= AHB1_CLK_EN;
 8000254:	4b20      	ldr	r3, [pc, #128]	@ (80002d8 <uart2_tx_init+0x88>)
 8000256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000258:	4a1f      	ldr	r2, [pc, #124]	@ (80002d8 <uart2_tx_init+0x88>)
 800025a:	f043 0301 	orr.w	r3, r3, #1
 800025e:	6313      	str	r3, [r2, #48]	@ 0x30

	//Set PA2 register mode to alternate function mode
	GPIOA->MODER &= ~(1U<<4);
 8000260:	4b1e      	ldr	r3, [pc, #120]	@ (80002dc <uart2_tx_init+0x8c>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a1d      	ldr	r2, [pc, #116]	@ (80002dc <uart2_tx_init+0x8c>)
 8000266:	f023 0310 	bic.w	r3, r3, #16
 800026a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 800026c:	4b1b      	ldr	r3, [pc, #108]	@ (80002dc <uart2_tx_init+0x8c>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a1a      	ldr	r2, [pc, #104]	@ (80002dc <uart2_tx_init+0x8c>)
 8000272:	f043 0320 	orr.w	r3, r3, #32
 8000276:	6013      	str	r3, [r2, #0]

	//Specify the alternate function (Alternate function low register)
	GPIOA->AFR[0] |= (1U<<8);
 8000278:	4b18      	ldr	r3, [pc, #96]	@ (80002dc <uart2_tx_init+0x8c>)
 800027a:	6a1b      	ldr	r3, [r3, #32]
 800027c:	4a17      	ldr	r2, [pc, #92]	@ (80002dc <uart2_tx_init+0x8c>)
 800027e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000282:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000284:	4b15      	ldr	r3, [pc, #84]	@ (80002dc <uart2_tx_init+0x8c>)
 8000286:	6a1b      	ldr	r3, [r3, #32]
 8000288:	4a14      	ldr	r2, [pc, #80]	@ (80002dc <uart2_tx_init+0x8c>)
 800028a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800028e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000290:	4b12      	ldr	r3, [pc, #72]	@ (80002dc <uart2_tx_init+0x8c>)
 8000292:	6a1b      	ldr	r3, [r3, #32]
 8000294:	4a11      	ldr	r2, [pc, #68]	@ (80002dc <uart2_tx_init+0x8c>)
 8000296:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800029a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 800029c:	4b0f      	ldr	r3, [pc, #60]	@ (80002dc <uart2_tx_init+0x8c>)
 800029e:	6a1b      	ldr	r3, [r3, #32]
 80002a0:	4a0e      	ldr	r2, [pc, #56]	@ (80002dc <uart2_tx_init+0x8c>)
 80002a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80002a6:	6213      	str	r3, [r2, #32]

	/****Configure UART****/
	//Enable clock access to uart2
	RCC->APB1ENR |= UART2_CLK_EN;
 80002a8:	4b0b      	ldr	r3, [pc, #44]	@ (80002d8 <uart2_tx_init+0x88>)
 80002aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002ac:	4a0a      	ldr	r2, [pc, #40]	@ (80002d8 <uart2_tx_init+0x88>)
 80002ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002b2:	6413      	str	r3, [r2, #64]	@ 0x40

	//Set baud rate
	uart_set_baudrate(USART2, APB1_CLK, BAUD_RATE);
 80002b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002b8:	4909      	ldr	r1, [pc, #36]	@ (80002e0 <uart2_tx_init+0x90>)
 80002ba:	480a      	ldr	r0, [pc, #40]	@ (80002e4 <uart2_tx_init+0x94>)
 80002bc:	f7ff ff9d 	bl	80001fa <uart_set_baudrate>

	//Configure transfer direction (Enable transmitter)
	USART2->CR1 = CR1_TE;
 80002c0:	4b08      	ldr	r3, [pc, #32]	@ (80002e4 <uart2_tx_init+0x94>)
 80002c2:	2208      	movs	r2, #8
 80002c4:	60da      	str	r2, [r3, #12]

	//Enable UART module
	USART2->CR1 |= CR1_UE;
 80002c6:	4b07      	ldr	r3, [pc, #28]	@ (80002e4 <uart2_tx_init+0x94>)
 80002c8:	68db      	ldr	r3, [r3, #12]
 80002ca:	4a06      	ldr	r2, [pc, #24]	@ (80002e4 <uart2_tx_init+0x94>)
 80002cc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002d0:	60d3      	str	r3, [r2, #12]
}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40023800 	.word	0x40023800
 80002dc:	40020000 	.word	0x40020000
 80002e0:	00f42400 	.word	0x00f42400
 80002e4:	40004400 	.word	0x40004400

080002e8 <main>:

int main(void){
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0

	uart2_tx_init();
 80002ec:	f7ff ffb0 	bl	8000250 <uart2_tx_init>

	while(1){
		uart_transmit('Y');
 80002f0:	2059      	movs	r0, #89	@ 0x59
 80002f2:	f7ff ff95 	bl	8000220 <uart_transmit>
 80002f6:	e7fb      	b.n	80002f0 <main+0x8>

080002f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002f8:	480d      	ldr	r0, [pc, #52]	@ (8000330 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000300:	480c      	ldr	r0, [pc, #48]	@ (8000334 <LoopForever+0x6>)
  ldr r1, =_edata
 8000302:	490d      	ldr	r1, [pc, #52]	@ (8000338 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000304:	4a0d      	ldr	r2, [pc, #52]	@ (800033c <LoopForever+0xe>)
  movs r3, #0
 8000306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000308:	e002      	b.n	8000310 <LoopCopyDataInit>

0800030a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800030a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800030c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800030e:	3304      	adds	r3, #4

08000310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000314:	d3f9      	bcc.n	800030a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000316:	4a0a      	ldr	r2, [pc, #40]	@ (8000340 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000318:	4c0a      	ldr	r4, [pc, #40]	@ (8000344 <LoopForever+0x16>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800031c:	e001      	b.n	8000322 <LoopFillZerobss>

0800031e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800031e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000320:	3204      	adds	r2, #4

08000322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000324:	d3fb      	bcc.n	800031e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000326:	f000 f811 	bl	800034c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800032a:	f7ff ffdd 	bl	80002e8 <main>

0800032e <LoopForever>:

LoopForever:
  b LoopForever
 800032e:	e7fe      	b.n	800032e <LoopForever>
  ldr   r0, =_estack
 8000330:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000338:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800033c:	080003b4 	.word	0x080003b4
  ldr r2, =_sbss
 8000340:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000344:	2000001c 	.word	0x2000001c

08000348 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000348:	e7fe      	b.n	8000348 <ADC_IRQHandler>
	...

0800034c <__libc_init_array>:
 800034c:	b570      	push	{r4, r5, r6, lr}
 800034e:	4d0d      	ldr	r5, [pc, #52]	@ (8000384 <__libc_init_array+0x38>)
 8000350:	4c0d      	ldr	r4, [pc, #52]	@ (8000388 <__libc_init_array+0x3c>)
 8000352:	1b64      	subs	r4, r4, r5
 8000354:	10a4      	asrs	r4, r4, #2
 8000356:	2600      	movs	r6, #0
 8000358:	42a6      	cmp	r6, r4
 800035a:	d109      	bne.n	8000370 <__libc_init_array+0x24>
 800035c:	4d0b      	ldr	r5, [pc, #44]	@ (800038c <__libc_init_array+0x40>)
 800035e:	4c0c      	ldr	r4, [pc, #48]	@ (8000390 <__libc_init_array+0x44>)
 8000360:	f000 f818 	bl	8000394 <_init>
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	10a4      	asrs	r4, r4, #2
 8000368:	2600      	movs	r6, #0
 800036a:	42a6      	cmp	r6, r4
 800036c:	d105      	bne.n	800037a <__libc_init_array+0x2e>
 800036e:	bd70      	pop	{r4, r5, r6, pc}
 8000370:	f855 3b04 	ldr.w	r3, [r5], #4
 8000374:	4798      	blx	r3
 8000376:	3601      	adds	r6, #1
 8000378:	e7ee      	b.n	8000358 <__libc_init_array+0xc>
 800037a:	f855 3b04 	ldr.w	r3, [r5], #4
 800037e:	4798      	blx	r3
 8000380:	3601      	adds	r6, #1
 8000382:	e7f2      	b.n	800036a <__libc_init_array+0x1e>
 8000384:	080003ac 	.word	0x080003ac
 8000388:	080003ac 	.word	0x080003ac
 800038c:	080003ac 	.word	0x080003ac
 8000390:	080003b0 	.word	0x080003b0

08000394 <_init>:
 8000394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000396:	bf00      	nop
 8000398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039a:	bc08      	pop	{r3}
 800039c:	469e      	mov	lr, r3
 800039e:	4770      	bx	lr

080003a0 <_fini>:
 80003a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a2:	bf00      	nop
 80003a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003a6:	bc08      	pop	{r3}
 80003a8:	469e      	mov	lr, r3
 80003aa:	4770      	bx	lr
